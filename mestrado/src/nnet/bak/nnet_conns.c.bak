#include "include/nnet_conns.h"

/*
 * BASIC UNIT CONNECTION OPERATIONS
 */

/*
 * nnet_uncn_matrix_init
 *
 * Initializes one Unit Connection Matrix.
 */
void
nnet_uncn_matrix_init (nnet_uncn_matrix_type * uncn_matrix)
{
  (*uncn_matrix).layer_orig = 0;
  (*uncn_matrix).layer_dest = 0;
  (*uncn_matrix).units_orig = 0;
  (*uncn_matrix).units_dest = 0;
  (*uncn_matrix).first_connection = NULL;
}


/*
 * nnet_uncn_absolute_index
 *
 * Returns the absolute position of the unit in the Unit Connection Matrix
 * list, given the number units at origin and destination layers,·
 * and the indexes of the origin and destination units.
 */
nnet_uncn_conn_index_type nnet_uncn_absolute_index
  (nnet_layer_index_type units_dest, nnet_layer_units_type orig_unit_index,
   nnet_layer_units_type dest_unit_index)
{
  return ((orig_unit_index * units_dest) + dest_unit_index);
}


/*
 * nnet_uncn_relative_index
 *
 * Returns the position of the unit in the Unit Connection Matrix
 * in terms of the origin and destination unit indexes.
 */
void nnet_uncn_relative_index
  (nnet_uncn_conn_index_type absolute_index,
   nnet_layer_index_type units_dest,
   nnet_layer_units_type * orig_unit_index,
   nnet_layer_units_type * dest_unit_index)
{
  ldiv_t div_result;

  /*
   * Integer division of the absolute index by the number of destination
   * layer units. The origin unit index is the quocient and the destination
   * unit index is the remainder.
   */
  div_result = ldiv (absolute_index, units_dest);
  *orig_unit_index = div_result.quot;
  *dest_unit_index = div_result.rem;
}


/*
 * nnet_uncn_connect
 *
 * Allocates space for the Unit Connection Matrix.
 * Initializes the Unit Connection Matrix parameters.
 * Connects all units from origin layer to all units of destination layer.
 * Returns EXIT_SUCCESS if ok or EXIT_FAILURE otherwise, displaying
 * error message.
 */
int nnet_uncn_connect
  (nnet_uncn_matrix_type * uc_matrix, nnet_layer_array_type layer_array,
   nnet_layer_index_type orig_layer, nnet_layer_index_type dest_layer)
{

  /* Number of units at origin and destination layers */
  nnet_layer_units_type units_orig, units_dest;

  /* Origin and destination unit counters */
  nnet_layer_units_type cnt_unit_orig, cnt_unit_dest;

  /* Absolute connection index counter */
  nnet_uncn_conn_index_type abs_index;

  /* Auxiliary unit connection */
  nnet_uncn_type *first_connection;
  nnet_uncn_type *current_connection;

  /*
   * Gets the number of units on origin and destination layers.
   * Verify if they were already created.
   */
  units_orig = nnet_layer_num_units (layer_array, orig_layer);
  if (units_orig == 0)

    {
      fprintf (stderr, "nnet_uncn_connect: origin layer %ld has no units.\n",
               orig_layer);
      return (EXIT_FAILURE);
    }
  units_dest = nnet_layer_num_units (layer_array, dest_layer);
  if (units_dest == 0)

    {
      fprintf (stderr,
               "nnet_uncn_connect: destination layer (%ld) has no units.\n",
               dest_layer);
      return (EXIT_FAILURE);
    }

  /* Unit Connection Matrix parameters */
  uc_matrix->layer_orig = orig_layer;
  uc_matrix->layer_dest = dest_layer;
  uc_matrix->units_orig = units_orig;
  uc_matrix->units_dest = units_dest;

  /* Allocates memory space for the Unit Connection Matrix */
  uc_matrix->first_connection =
    (nnet_uncn_type *) malloc ((units_orig * units_dest) *
                               sizeof (nnet_uncn_type));
  if (uc_matrix->first_connection == NULL)

    {
      fprintf (stderr,
               "nnet_uncn_connect: cannot allocate %ld bytes for connection matrix (%ld,%ld).\n",
               (units_orig * units_dest) * sizeof (nnet_uncn_type),
               orig_layer, dest_layer);
      return (EXIT_FAILURE);
    }
  first_connection = uc_matrix->first_connection;

  /* Set the initial parameters for all the connections */
  for (cnt_unit_orig = 0; cnt_unit_orig < units_orig; cnt_unit_orig++)
    for (cnt_unit_dest = 0; cnt_unit_dest < units_dest; cnt_unit_dest++)

      {
        abs_index =
          nnet_uncn_absolute_index (units_dest, cnt_unit_orig, cnt_unit_dest);
        current_connection = first_connection + abs_index;
        current_connection->unit_orig = cnt_unit_orig;
        current_connection->unit_dest = cnt_unit_dest;
        current_connection->connected = NNET_UNCN_CONNECTED;
      }
  return (EXIT_SUCCESS);
}


/*
 * nnet_uncn_goto_connection
 *
 * Returns a pointer to a given connection.
 * Returns NULL if the process fails.
 */
nnet_uncn_type *nnet_uncn_goto_connection
  (nnet_lcnn_matrix_type lc_matrix, nnet_layer_index_type orig_layer,
   nnet_layer_index_type dest_layer, nnet_layer_units_type orig_unit,
   nnet_layer_units_type dest_unit)
{

  /* Auxiliary Unit Connection Matrix */
  nnet_uncn_matrix_type connection_matrix;

  /* Auxiliary variables for origin and destination layers */
  nnet_layer_index_type units_orig, units_dest;

  /* Pointers to the first and the current connections for the layer */
  nnet_uncn_type *first_connection, *current_connection;

  /* Absolute connection index counter */
  nnet_uncn_conn_index_type abs_index;

  /* First, checks if layers are connected */
  if (!(nnet_lcnn_are_connected (lc_matrix, orig_layer, dest_layer)))

    {
      fprintf (stderr,
               "nnet_uncn_goto_connection: layers %d and %d are not connected.\n",
               orig_layer, dest_layer);
      return (NULL);
    }
  connection_matrix = lc_matrix[orig_layer][dest_layer].nnet_uncn_matrix;
  units_orig = connection_matrix.units_orig;
  units_dest = connection_matrix.units_dest;
  first_connection = connection_matrix.first_connection;
  abs_index = nnet_uncn_absolute_index (units_dest, orig_unit, dest_unit);
  current_connection = first_connection + abs_index;
  return (current_connection);
}


/*
 * nnet_uncn_get
 *
 * Retrieves all attributes from a given connection.
 *
 * The connection is given by
 *   - nnet_lcnn_matrix_type: layer connection matrix
 *   - orig_layer: origin layer
 *   - dest_layer: destination_layer
 *   - orig_unit: origin unit index in the origin layer
 *   - dest_unit: destination unit index in the destination layer
 *
 * The returned attributes are
 *   - weight: connection weight
 *   - connected: indicates if connection is active
 */
int nnet_uncn_get
  (nnet_lcnn_matrix_type lc_matrix, nnet_layer_index_type orig_layer,
   nnet_layer_index_type dest_layer, nnet_layer_units_type orig_unit,
   nnet_layer_units_type dest_unit, nnet_uncn_weight_type * weight,
   nnet_uncn_connected_type * connected)
{
  nnet_uncn_type *current_connection;

  /* Returns a pointer to the given connection */
  current_connection =
    nnet_uncn_goto_connection (lc_matrix, orig_layer, dest_layer, orig_unit,
                               dest_unit);
  if (current_connection == NULL)

    {
      fprintf (stderr, "nnet_uncn_get: invalid connection\n");
      return (EXIT_FAILURE);
    }
  *connected = current_connection->connected;
  *weight = current_connection->weight;
  return (EXIT_SUCCESS);
}


/*
 * nnet_uncn_set
 *
 * Updates the attributes of a given connection.
 *
 * The connection is given by
 *   - nnet_lcnn_matrix_type: layer connection matrix
 *   - orig_layer: origin layer
 *   - dest_layer: destination_layer
 *   - orig_unit: origin unit index in the origin layer
 *   - dest_unit: destination unit index in the destination layer
 *
 * The updateable attributes are
 *   - weight: connection weight
 *   - connected: indicates if connection is active
 */
int nnet_uncn_set
  (nnet_lcnn_matrix_type * lc_matrix, nnet_layer_index_type orig_layer,
   nnet_layer_index_type dest_layer, nnet_layer_units_type orig_unit,
   nnet_layer_units_type dest_unit, nnet_uncn_weight_type weight,
   nnet_uncn_connected_type connected)
{

  /* Auxiliary pointers to the given connection */
  nnet_uncn_type *current_connection;

  /* Returns a pointer to the given connection */
  current_connection =
    nnet_uncn_goto_connection (*lc_matrix, orig_layer, dest_layer, orig_unit,
                               dest_unit);
  if (current_connection == NULL)

    {
      fprintf (stderr, "nnet_uncn_set: invalid connection\n");
      return (EXIT_FAILURE);
    }
  current_connection->weight = weight;
  current_connection->connected = connected;
  return (EXIT_SUCCESS);
}


/******************************************************************************/

/*
 * nnet_lcnn_matrix_init
 *
 * Initializes the Layer Connection Matrix
 */
void
nnet_lcnn_matrix_init (nnet_lcnn_matrix_type * matrix)
{
  nnet_layer_index_type l1, l2;
  for (l1 = 0; l1 < NNET_MAX_LAYERS; l1++)
    for (l2 = 0; l2 < NNET_MAX_LAYERS; l2++)

      {
        (*matrix)[l1][l2].nnet_lcnn_connected = NNET_LCNN_NOT_CONNECTED;
        nnet_uncn_matrix_init (&((*matrix)[l1][l2].nnet_uncn_matrix));
      }
}


/*
 * nnet_lcnn_are_connected
 *
 * Returns 0 if origin and destination layers are not connected.
 * Other value is returned if already connected.
 */
int nnet_lcnn_are_connected
  (nnet_lcnn_matrix_type lc_matrix, nnet_layer_index_type orig_layer,
   nnet_layer_index_type dest_layer)
{
  enum nnet_lcnn_connected_type flag_conn;
  flag_conn = lc_matrix[orig_layer][dest_layer].nnet_lcnn_connected;
  if (flag_conn == NNET_LCNN_CONNECTED)
    return (-1);

  else
    return (0);
}


/*
 * nnet_lcnn_connect
 *
 * Creates the connection between origin and destination layers.
 * Creates the connections between origin and destination layer units.
 * Does nothing if already connected.
 */
int nnet_lcnn_connect
  (nnet_lcnn_matrix_type * matrix, nnet_layer_array_type layer_array,
   nnet_layer_index_type orig_layer, nnet_layer_index_type dest_layer)
{
  if (nnet_lcnn_are_connected (*matrix, orig_layer, dest_layer) == 0)

    {

      /*
       * Layers were not originally connected.
       * First, connects the units from the origin layer to the
       * destination layer.
       */
      if ((nnet_uncn_connect
           (&((*matrix)[orig_layer][dest_layer].nnet_uncn_matrix),
            layer_array, orig_layer, dest_layer)) != EXIT_SUCCESS)

        {
          fprintf (stderr,
                   "nnet_lcnn_connect: could not create Unit Connection Matrix.\n");
          return (EXIT_FAILURE);
        }

      /*
       * Set the 'connected' flag between the layers
       */
      (*matrix)[orig_layer][dest_layer].nnet_lcnn_connected =
        NNET_LCNN_CONNECTED;
    }
  return (EXIT_SUCCESS);
}


/*
 * nnet_lcnn_disconnect
 *
 * Disconnects origin and destination layers.
 * Returns EXIT_FAILURE if not connected.
 */
int nnet_lcnn_disconnect
  (nnet_lcnn_matrix_type * matrix, nnet_layer_index_type orig_layer,
   nnet_layer_index_type dest_layer)
{
  if (nnet_lcnn_are_connected (*matrix, orig_layer, dest_layer))

    {

      /*
       * Layers are connected. Disconnect them.
       */
      (*matrix)[orig_layer][dest_layer].nnet_lcnn_connected =
        NNET_LCNN_NOT_CONNECTED;
      return (EXIT_SUCCESS);
    }

  else

    {
      fprintf (stderr,
               "nnet_lcnn_disconnect: connection from layer %ld to layer %ld is not made.\n",
               orig_layer, dest_layer);
      return (EXIT_FAILURE);
    }
}
