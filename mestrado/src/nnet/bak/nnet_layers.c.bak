#include "nnet_layers.h"

/*
 * nnet_layer_position_description
 *
 * Returns the description of a layer position type
 */
char *
nnet_layer_position_description (const nnet_layer_position_type position)
{
  switch (position)
    {
    case NNET_LAYER_INPUT:
      return ("input");

    case NNET_LAYER_HIDDEN:
      return ("hidden");

    case NNET_LAYER_OUTPUT:
      return ("output");

    case NNET_LAYER_UNDEFINED:
      return ("undefined");

    default:
      return (NULL);
    }
}


/*
 * nnet_layer_created
 *
 * Checks if the given layer was already created.
 * Returns EXIT_SUCCESS if yes or EXIT_FAILURE if no.
 */
int
nnet_layer_created (const nnet_layer_array_type layer,
                    const nnet_layer_index_type layer_index)
{
  if (layer[layer_index].nnet_layer_created == NNET_LAYER_CREATED)
    return (EXIT_SUCCESS);
  else
    return (EXIT_FAILURE);
}


/*
 * nnet_layer_num_units
 *
 * Returns the number of units on the layer identified by layer_number.
 * Checks for the previous creation of the layer.
 */
nnet_layer_units_type
nnet_layer_num_units (const nnet_layer_array_type layer,
                      const nnet_layer_index_type layer_index)
{
  nnet_layer_units_type num_units;

  /*
   * Checks if the layer was previously created
   */
  if (nnet_layer_created (layer, layer_index) == EXIT_FAILURE)
    {
      fprintf (stderr, "nnet_layer_num_units: layer %ld not created.\n",
               layer_index);
      return (0);
    }

  /*
   * Gets the number of units in layer
   */
  num_units = layer[layer_index].nnet_layer_num_units;

  return (num_units);
}


/*
 * nnet_layer_init
 *
 * Initializes one layer structure, given by the index layer_index
 */
void
nnet_layer_init (nnet_layer_array_type * layer,
                 const nnet_layer_index_type layer_index)
{
  (*layer)[layer_index].nnet_layer_num_units = 0;
  (*layer)[layer_index].nnet_layer_position = NNET_LAYER_UNDEFINED;
  (*layer)[layer_index].nnet_layer_created = NNET_LAYER_NOT_CREATED;
  (*layer)[layer_index].nnet_layer_num_current_unit = 0;
  (*layer)[layer_index].nnet_layer_first_unit = NULL;
  (*layer)[layer_index].nnet_layer_current_unit = NULL;
  (*layer)[layer_index].nnet_layer_last_unit = NULL;
}


/*
 * nnet_layer_init_all
 *
 * Initializes all of the layers of a given layer array
 */
void
nnet_layer_init_all (nnet_layer_array_type * layer)
{
  nnet_layer_index_type i;

  for (i = 0; i < NNET_MAX_LAYERS; i++)
    nnet_layer_init (layer, i);
}



/*
 * nnet_layer_create
 *
 * Creates a layer, given the parameters.
 * If the layer already exists, prints the corresponding message and returns.
 */
int
nnet_layer_create (nnet_layer_array_type * layer,
                   const nnet_layer_index_type layer_index,
                   const nnet_layer_position_type position)
{
  if (nnet_layer_created (*layer, layer_index) == EXIT_SUCCESS)
    {
      fprintf (stderr, "nnet_layer_create: already created %s layer %ld.\n",
               nnet_layer_position_description
               ((*layer)[layer_index].nnet_layer_position), layer_index);
      return (EXIT_FAILURE);
    }

  nnet_layer_init (layer, layer_index);

  (*layer)[layer_index].nnet_layer_position = position;
  (*layer)[layer_index].nnet_layer_created = NNET_LAYER_CREATED;

  return (EXIT_SUCCESS);
}


/*
 * nnet_layer_rewind
 *
 * Positions the current unit to the first unit of the layer.
 */
void
nnet_layer_rewind (nnet_layer_array_type * layer,
                   const nnet_layer_index_type layer_index)
{
  /* Checks for the existence of the layer */
  if (nnet_layer_created (*layer, layer_index) == EXIT_FAILURE)
    {
      fprintf (stderr, "nnet_layer_rewind: layer %ld not created yet.\n",
               layer_index);
      exit (EXIT_FAILURE);
    }

  if ((*layer)[layer_index].nnet_layer_num_current_unit > 0)
    {
      (*layer)[layer_index].nnet_layer_current_unit = NULL;
      (*layer)[layer_index].nnet_layer_num_current_unit = 0;
    }
}



/*
 * nnet_layer_goto_next
 *
 * Positions the current unit of the given layer to the next unit
 */
int
nnet_layer_goto_next (nnet_layer_array_type * layer,
                      const nnet_layer_index_type layer_index)
{
  /* Checks for the existence of the layer */
  if (nnet_layer_created (*layer, layer_index) == EXIT_FAILURE)
    {
      fprintf (stderr, "nnet_layer_goto_next: layer %ld not created yet.\n",
               layer_index);
      return (EXIT_FAILURE);
    }

  /* Verifies if the layer has units */
  if ((*layer)[layer_index].nnet_layer_num_units == 0)
    {
      fprintf (stderr, "nnet_layer_goto_next: layer %ld has no units.\n",
               layer_index);
      return (EXIT_FAILURE);
    }

  /* Verifies if not at the tail of the list */
  if ((*layer)[layer_index].nnet_layer_num_current_unit ==
      (*layer)[layer_index].nnet_layer_num_units)
    {
      fprintf (stderr,
               "nnet_layer_goto_next: already in tail of layer %ld.\n",
               layer_index);
      return (EXIT_FAILURE);
    }

  /* 
   * If current unit is top, go to the first unit. Otherwise, go to the
   * next created unit.
   */
  if ((*layer)[layer_index].nnet_layer_num_current_unit == 0)
    {
      (*layer)[layer_index].nnet_layer_current_unit =
        (*layer)[layer_index].nnet_layer_first_unit;
    }
  else
    (*layer)[layer_index].nnet_layer_current_unit =
      (*layer)[layer_index].nnet_layer_current_unit->nnet_unit_next;

  /* Increment current unit */
  (*layer)[layer_index].nnet_layer_num_current_unit++;

  return (EXIT_SUCCESS);
}


/*
 * nnet_layer_goto_unit
 *
 * Positions the current unit of the layer to the given unit
 */
int
nnet_layer_goto_unit (nnet_layer_array_type * layer,
                      const nnet_layer_index_type layer_index,
                      const nnet_layer_units_type unit)
{
  long i;

  /* Checks if requested unit exists */
  if (unit > (*layer)[layer_index].nnet_layer_num_units)
    {
      fprintf (stderr,
               "nnet_layer_goto_unit: requested unit %ld exceeds the number of layer %ld units %ld.\n",
               unit, layer_index, (*layer)[layer_index].nnet_layer_num_units);
      return (EXIT_FAILURE);
    }

  /* Checks lower interval */
  if (unit < 0)
    {
      fprintf (stderr,
               "nnet_layer_goto_unit: cannot go to unit %ld.\n", unit);
      return (EXIT_FAILURE);
    }

  /* See if it is really necessary */
  if ((*layer)[layer_index].nnet_layer_num_current_unit != unit)
    {
      nnet_layer_rewind (layer, layer_index);
      for (i = 0; i < unit; i++)
        nnet_layer_goto_next (layer, layer_index);
    }

  return (EXIT_SUCCESS);
}
