#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "ftrxtr/s_cepstrum.h"

/*
#include "../include/s_fft.h"
#include "../include/s_complex.h"
#include "../include/s_window.h"
#include "../include/s_files.h"
*/
int
main ()
{
  int exit_status;
  scep_parameter_type param;
  char in_file_name[__SMP_NAME_SIZE_];
  char out_file_name[__SMP_NAME_SIZE_];

  /* Atribui os nomes dos arquivos de entrada e saida */
  strcpy (in_file_name, "../data/numeros/atm-0-22khz-8b.wav");
  strcpy (out_file_name, "jalalabadi.txt");

  /* Inicializa a estrutura de parametros */
  param.in_preemphasis = SWIN_YES;
  param.alpha_preemphasis = 0.95;
  param.frame_width = 512;
  param.superposing_samples = 64;
  param.windowing_function = SWIN_HAMMING;
  param.triangular_window_low = 0.0;
  param.triangular_window_center = 0.0;
  param.triangular_window_high = 0.0;
  param.triangular_window_central_value = 0.0;
  param.kaiser_window_B = 0.0;
  param.purge_zero_power = SWIN_PURGE_ZERO_POWER;
  param.log_basis = 10.0;
  param.delta_mel = 100.0;
  param.total_filters = 16;
  param.write_index = SMP_DONT_WRITE_INDEX;
  param.write_lists = SMP_WRITE_LISTS;
  param.write_time = SMP_WRITE_NORM_TIME;
  param.write_files = SMP_WRITE_SINGLE_FILE;
  param.write_format = SMP_FORMAT_RAW;
  param.write_real_part = SMP_YES;
  param.write_img_part = SMP_NO;

  /* Faz o 'feature extraction' */
  exit_status = scep_mfcc_file_write (in_file_name, param, out_file_name);

  if (exit_status != EXIT_SUCCESS)
  {
    fprintf (stderr, "erro executando feature extraction\n");
    return (EXIT_FAILURE);
  }

  exit (EXIT_SUCCESS);
  /*
     register int i;
     double y;
     char buf[100];
     double lower_bound;
     double upper_bound;
     long segments;
     int method;
     cmp_complex zvalue;
     FILE *wav_FILE;
     swav_type wav_file;
     int detected;
     list_file_type file_type;
     smp_num_samples samples, reversed_samples, N, Npower;
   */
  /*char *sigfilename = "data/voice/numeros/lgc-0-44khz-16b-st.wav"; */
  /*char *sigfilename = "data/hun-1.txt"; */


  /*
   * Test for integral
   * 
   printf ("limite inferior = ");
   scanf ("%s", buf);
   lower_bound = strtod (buf, NULL);

   printf ("limite superior = ");
   scanf ("%s", buf);
   upper_bound = strtod (buf, NULL);

   printf ("número de segmentos = ");
   scanf ("%s", buf);
   segments = strtol (buf, NULL, 10);

   printf ("método de integração: ");
   scanf ("%s", buf);
   method = (int) strtol (buf, NULL, 10);

   y = func_integral (lower_bound, upper_bound, segments, sin, method);

   printf ("integral = %f\n", y);
   *
   */

  /*
   * Test for samples

   create_list (&list);

   exit_status = add_index_entry (&list, "Fisk-1", "data/fisk-1.txt", &p);
   if (exit_status != EXIT_SUCCESS)
   {
   fprintf (stderr, "erro em add_index_entry para a lista 1\n");
   exit (EXIT_FAILURE);
   }

   exit_status = add_index_entry (&list, "Hun-1", "data/hun-1.txt", &p);
   if (exit_status != EXIT_SUCCESS)
   {
   fprintf (stderr, "erro em add_index_entry para a lista 2\n");
   exit (EXIT_FAILURE);
   }

   exit_status = add_index_entry (&list, "Perkin2", "data/perkin2.txt", &p);
   if (exit_status != EXIT_SUCCESS)
   {
   fprintf (stderr, "erro em add_index_entry para a lista 3\n");
   exit (EXIT_FAILURE);
   }

   exit_status = add_index_entry (&list, "Stin6", "data/stin6.txt", &p);
   if (exit_status != EXIT_SUCCESS)
   {
   fprintf (stderr, "erro em add_index_entry para a lista 4\n");
   exit (EXIT_FAILURE);
   }



   exit_status = read_samples_file (&list, 1);
   if (exit_status != EXIT_SUCCESS)
   {
   fprintf (stderr, "erro lendo arquivo de amostras da lista 1\n");
   exit (EXIT_FAILURE);
   }

   exit_status = read_samples_file (&list, 2);
   if (exit_status != EXIT_SUCCESS)
   {
   fprintf (stderr, "erro lendo arquivo de amostras da lista 2\n");
   exit (EXIT_FAILURE);
   }

   exit_status = read_samples_file (&list, 3);
   if (exit_status != EXIT_SUCCESS)
   {
   fprintf (stderr, "erro lendo arquivo de amostras da lista 3\n");
   exit (EXIT_FAILURE);
   }

   exit_status = read_samples_file (&list, 4);
   if (exit_status != EXIT_SUCCESS)
   {
   fprintf (stderr, "erro lendo arquivo de amostras da lista 3\n");
   exit (EXIT_FAILURE);
   }

   write_list (list, "data/teste.txt", SMP_YES);
   */

  /*
     add_index_entry (&list, "Lista 1", "data/lista1.txt", &signal_pos);
   */

  /* FFT */
  /*
     puts ("Vai executar a FFT...");
     exit_status = sfft_exec (&index, signal_pos, &fft_pos, SMP_NO);
     if (exit_status != EXIT_SUCCESS)

     {
     fprintf (stderr, "erro executando fft\n");
     exit (EXIT_FAILURE);
     }
     puts ("Executou a FFT!");
     exit_status = calculate_list_statistics (&(index.current->list));
   */

  /* FFT DA FFT */
  /*
     puts ("Vai executar a FFT da FFT...");
     signal_pos = fft_pos;
     exit_status = sfft_exec (&index, signal_pos, &fft_pos, SMP_NO);
     if (exit_status != EXIT_SUCCESS)

     {
     fprintf (stderr, "erro executando fft\n");
     exit (EXIT_FAILURE);
     }
     puts ("Executou a FFT da FFT!");
   */

  /* Calculates the FFT statistics */
  /*
     exit_status = calculate_list_statistics (&(index.current->list));

     write_index (index, "result.txt", SMP_NO);
     switch_entries (&index, 2, 3);
     write_index (index, "result2.txt", SMP_NO);
     12345678901234567890123456789012345678901234567890123456789012345678901234567890
   */


/*==============================================================================
  swin_window (&index, 1, SWIN_YES, 0.95, 4096, 1024, SWIN_HAMMING, 20.0,
	       &win_index);

  write_index (index, "index.txt", SMP_YES, SMP_YES, SMP_NO);
  write_index (win_index, "win_index.txt", SMP_YES, SMP_YES, SMP_NO);

  exit_status = sfft_exec_index (&win_index, &fft_index, SMP_YES, SMP_NO);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "teste: problemas na FFT do índice\n");
      exit (EXIT_FAILURE);
    }

  write_index (fft_index, "fft_index.txt", SMP_YES, SMP_YES, SMP_NO);
=========================================================================*/


  /*
  index_list_type index, fft_index, win_index, mfcc_index;
  smp_index_pos signal_pos, fft_pos;
  char *sigfilename = "data/numeros/atm-0-22khz-8b.wav";
  char *sigfilename = "data/numeros/lgc-9-44khz-16b-st.wav";
  char *sigfilename = "data/lista1.txt";
  */

  /* Criacao do indice do arquivo de entrada */
  /*
  puts ("criando indice para os sinais...");
  exit_status = create_index (&index, NULL);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "Erro criando indice\n");
      exit (EXIT_FAILURE);
    }
  */

  /* Criacao no indice de uma lista (entrada) para o arquivo */
  /*
  puts ("adicionando entrada...");
  exit_status =
    add_index_entry (&index, "Lista 1", sigfilename, NULL, SMP_REAL, 0.0, 0.0,
                     0, &signal_pos, SMP_SET_CURRENT);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "erro em add_index_entry para a lista %d\n",
               signal_pos);
      exit (EXIT_FAILURE);
    }
  */

  /* Leitura do arquivo de entrada */
  /*
  puts ("lendo arquivo de amostras...");
  exit_status = read_samples_file (&index, signal_pos);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "erro lendo arquivo de amostras\n");
      exit (EXIT_FAILURE);
    }
  */

  /*
  write_index (index, "index.txt", SMP_WRITE_INDEX, SMP_WRITE_LISTS,
               SMP_WRITE_NORM_TIME, SMP_WRITE_SINGLE_FILE, SMP_FORMAT_RAW,
               SMP_YES, SMP_NO);
  */

  /* Execucao do janelamento sobre a lista de entrada */
  /*
  puts ("executando janelamento");
  exit_status =
    swin_window (&index, SWIN_YES, 0.95, 512, 64, SMP_COMPLEX, SMP_REAL,
                 SWIN_HAMMING, 0.0, 0.0, 0.0, 0.0, 0.0, SWIN_PURGE_ZERO_POWER,
                 &win_index);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "erro executando janelamento\n");
      return (EXIT_FAILURE);
    }
  */

  /*
  write_index (win_index, "win_index.txt", SMP_WRITE_INDEX, SMP_WRITE_LISTS,
               SMP_WRITE_NORM_TIME, SMP_WRITE_SINGLE_FILE, SMP_FORMAT_RAW,
               SMP_YES, SMP_NO);
  */

  /* FFT direta real do sinal janelado */
  /*
  puts ("executando fft do sinal janelado");
  exit_status =
    sfft_exec_index (&win_index, &fft_index, SFFT_FFT, SFFT_IN_PLACE,
                     SFFT_DIRECT, SFFT_REAL);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "erro executando FFT\n");
      exit (EXIT_FAILURE);
    }
  */


  /*
  printf ("aplicando a funcao log |.| às janelas\n");
  exit_status =
    apply_index_function (&fft_index, cmp_rlm, CMP_FCN_COMPLEX, 1, 10.0);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "erro aplicando a funcao log |.|\n");
      exit (EXIT_FAILURE);
    }
  */

  /*
  write_index (fft_index, "fft_index.txt", SMP_WRITE_INDEX,
               SMP_WRITE_LISTS, SMP_WRITE_NORM_TIME, SMP_WRITE_SINGLE_FILE,
               SMP_FORMAT_RAW, SMP_YES, SMP_NO);
  */

  /*
  printf ("calculando os MFCC's\n");
  exit_status = scep_mfcc_index (fft_index, 100.0, 16, &mfcc_index);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "erro calculando os coeficientes mel-cepstrais\n");
      exit (EXIT_FAILURE);
    }

  printf ("executando a FFT inversa\n");
  exit_status =
    sfft_exec_index (&mfcc_index, &mfcc_index, SFFT_FCT, SFFT_IN_PLACE,
                     SFFT_DIRECT, SFFT_REAL);
  if (exit_status != EXIT_SUCCESS)
    {
      fprintf (stderr, "erro executando FFT inversa\n");
      exit (EXIT_FAILURE);
    }

  write_index (mfcc_index, "mfcc_index.txt", SMP_WRITE_INDEX,
               SMP_WRITE_LISTS, SMP_WRITE_NORM_TIME, SMP_WRITE_SINGLE_FILE,
               SMP_FORMAT_RAW, SMP_YES, SMP_YES);
  */

  /* Variaveis */
}
